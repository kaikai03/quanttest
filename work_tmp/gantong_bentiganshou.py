import numpy as np
from sklearn.preprocessing import PolynomialFeatures
# import matplotlib.pyplot as plt
# import pandas as pd
from sklearn.linear_model import LinearRegression, Ridge

from sklearn.svm import SVC,LinearSVC
from sklearn.ensemble import GradientBoostingClassifier
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier

from sklearn.neighbors import KNeighborsClassifier
# from sklearn.naive_bayes import MultinomialNB

from sklearn.ensemble import BaggingClassifier


age_train = [8, 5, 9, 10, 6, 9, 10, 5, 7, 8, 7, 8, 8, 9, 5, 7, 8, 6, 6, 7, 7, 7, 10, 8, 5, 8, 9, 7, 10, 8, 6, 7, 9, 9, 9, 9, 7, 3, 10, 9, 6, 5, 6, 9, 10, 7, 9, 9, 7, 10, 9, 7, 9, 8, 9, 10, 7, 7, 9, 7, 7, 8, 8, 10, 9, 10, 10, 10, 8, 6, 6, 6, 5, 5, 7, 8, 5, 6, 6, 12, 9, 7, 9, 9, 12, 5, 8, 7, 7, 5, 6, 9, 7, 6, 8, 7, 10, 8, 10, 7, 9, 6, 8, 6, 8, 8, 5, 6, 5, 5, 5, 7, 12, 6, 7, 7, 5, 7, 8, 7, 7, 5, 10, 5, 7, 5, 5, 11, 10, 11, 9, 8, 11, 8, 6, 4, 8]
score_train = [55, 41, 57, 43, 53, 35, 58, 37, 56, 58, 51, 38, 58, 41, 44, 40, 88, 36, 32, 46, 50, 48, 51, 60, 41, 48, 60, 60, 37, 49, 41, 32, 51, 42, 46, 50, 46, 55, 51, 36, 51, 59, 60, 39, 59, 41, 44, 58, 55, 60, 56, 42, 44, 55, 48, 47, 49, 46, 60, 52, 59, 45, 45, 47, 49, 55, 56, 45, 59, 42, 33, 51, 40, 40, 56, 54, 51, 54, 60, 49, 46, 58, 55, 55, 47, 52, 49, 38, 50, 49, 32, 42, 44, 58, 52, 43, 59, 52, 48, 60, 45, 42, 53, 48, 32, 54, 42, 52, 43, 29, 39, 42, 58, 39, 60, 46, 47, 45, 45, 48, 57, 47, 40, 58, 33, 43, 42, 57, 49, 46, 50, 45, 56, 48, 46, 34, 47]
x_train = [[x, score_train[i]] for i, x in enumerate(age_train)]
x_train = [[x, score_train[i], x**2, x*score_train[i], score_train[i]**2,
            x**6.2+score_train[i]**0.55,score_train[i]**8] for i, x in enumerate(age_train)]
x_train = [[x, score_train[i], x**2, x*score_train[i], score_train[i]**2] for i, x in enumerate(age_train)]


final_y_train = [2, 1, 2, 1, 2, 1, 2, 0, 2, 2, 2, 0, 2, 2, 1, 1, 2, 0, 0, 2, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 0, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 0, 2, 0, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 0, 2]
y_train = [55, 33, 66, 31, 51, 32, 57, 26, 56, 60, 48, 25, 60, 41, 37, 31, 55, 25, 19, 40, 47, 44, 45, 64, 33, 43, 70, 63, 21, 44, 33, 18, 56, 43, 49, 55, 40, 54, 45, 33, 48, 60, 61, 38, 58, 32, 46, 67, 55, 59, 64, 34, 46, 55, 52, 38, 45, 40, 70, 50, 61, 37, 37, 38, 53, 52, 53, 35, 62, 34, 20, 48, 31, 31, 56, 53, 48, 52, 61, 42, 49, 60, 63, 63, 38, 49, 44, 27, 47, 45, 19, 43, 38, 58, 50, 36, 58, 50, 40, 63, 47, 34, 51, 43, 15, 53, 34, 49, 36, 14, 30, 34, 58, 30, 63, 40, 42, 39, 37, 44, 58, 42, 26, 58, 19, 36, 34, 56, 42, 36, 55, 37, 53, 43, 40, 22, 41]

age_test = [12, 10, 10, 10, 11, 7, 8, 7, 5, 8, 6, 6, 7, 5, 5, 6, 5, 10, 12, 9, 10, 12, 9, 10, 7, 9, 10, 7, 7, 7, 6, 7, 10]
score_test = [56, 52, 37, 44, 58, 57, 44, 30, 48, 41, 56, 52, 47, 43, 45, 33, 47, 37, 32, 48, 52, 53, 53, 56, 37, 60, 60, 57, 46, 42, 60, 45, 44]
x_test = [[x,score_test[i]] for i,x in enumerate(age_test)]
x_test = [[x, score_test[i], x**2, x*score_test[i], score_test[i]**2,
           x**6.2+score_test[i]**0.55,score_test[i]**8] for i, x in enumerate(age_test)]
x_test = [[x, score_test[i], x**2, x*score_test[i], score_test[i]**2] for i, x in enumerate(age_test)]

y_test = [54, 47, 21, 33, 58, 58, 36, 15, 43, 30, 55, 49, 42, 36, 39, 20, 42, 21, 11, 52, 47, 49, 59, 53, 26, 70, 59, 58, 40, 34, 61, 39, 33]


final_y = [2, 2, 0, 1, 2, 2, 1, 0, 2, 1, 2, 2, 2, 1, 1, 0, 2, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 1, 2, 1, 1]




poly = PolynomialFeatures(degree=2 ,include_bias=False)
poly.fit(x_train, y_train)
x_train_poly = poly.fit_transform(x_train)

x_test_poly = poly.fit_transform(x_test)


line = LinearRegression()
line.fit(x_train, y_train)
line.score(x_test, y_test)
line.predict(x_test)
line.predict(x_train)


line.fit(x_train_poly, y_train)
line.score(x_test_poly, y)
line.predict(x_test_poly)

# plt.plot(y_sample, line.predict(x_poly), color = 'red')
# plt.title('Linear Regression')
# plt.xlabel('Temperature')
# plt.ylabel('Pressure')
# plt.show()





forest = RandomForestClassifier(n_estimators=150)
forest.fit(x_train, y_train)
forest.score(x_test, y)
forest.predict([[9,64]])
forest.predict(x_test)
forest.predict(x_train)



import m2cgen as m2c
code = m2c.export_to_java(forest)


# 目前随机森林可正确输出


std_score = line.predict(x_train)
std_score = [[i] for i in std_score]

std_test = line.predict(x_test)
std_test = [[i] for i in std_test]

forest = RandomForestClassifier(n_estimators=10)
forest.fit(std_score, final_y_train)
forest.score(std_score, final_y_train)

forest.score(std_test, final_y)



for i in range(1,99):
    # forest = RandomForestClassifier(n_estimators=i)
    forest.fit(std_score, final_y_train)
    print(i, forest.score(std_test, final_y))

std_score = [4.023682891, 3.477981293, 4.059791332, 3.593727741, 3.959850609, 3.147703688, 4.064220869, 3.248637374, 4.043656172, 4.085577929, 3.916036261, 3.349019789, 4.085577929, 3.50997283, 3.621913728, 3.46135322, 4.10800075, 3.207946644, 2.914184389, 3.742494622, 3.885241846, 3.817915766, 3.896893575, 4.119348613, 3.477981293, 3.82013014, 4.112652591, 4.117134239, 3.265967873, 3.85477072, 3.502114099, 2.926524767, 3.911554613, 3.560443817, 3.738012974, 3.880760199, 3.742494622, 3.889316165, 3.896893575, 3.215805375, 3.903695883, 4.064497255, 4.104793861, 3.401028448, 4.081827754, 3.514454478, 3.653905264, 4.078881907, 4.021468517, 4.097991553, 4.039174524, 3.564925465, 3.653905264, 4.023682891, 3.813434118, 3.762109733, 3.852556347, 3.742494622, 4.112652591, 3.94500017, 4.100970439, 3.703780735, 3.703780735, 3.762109733, 3.848074699, 4.002325831, 4.024513486, 3.682423675, 4.103184813, 3.552585087, 2.99314678, 3.903695883, 3.424880036, 3.424880036, 4.043656172, 3.999877563, 3.879563077, 3.985322811, 4.104793861, 3.783137506, 3.738012974, 4.083363555, 4.016986869, 4.016986869, 3.711833579, 3.908526986, 3.85477072, 3.346805415, 3.885241846, 3.816083162, 2.914184389, 3.560443817, 3.658386912, 4.071023176, 3.947214544, 3.612870426, 4.081827754, 3.947214544, 3.79877308, 4.117134239, 3.697084713, 3.552585087, 3.974405362, 3.805575388, 2.928739141, 3.999877563, 3.52845228, 3.932659792, 3.576397242, 2.628152913, 3.369036911, 3.564925465, 4.013944715, 3.393169717, 4.117134239, 3.742494622, 3.744779234, 3.701566361, 3.703780735, 3.817915766, 4.06427298, 3.744779234, 3.442210534, 4.04689037, 3.005487158, 3.576397242, 3.52845228, 4.023271136, 3.833413661, 3.701492778, 3.880760199, 3.703780735, 4.002654328, 3.82013014, 3.730154244, 3.005721956, 3.783466793]
std_score = [[i] for i in std_score]

std_test = [3.974237332, 3.925857484, 3.265967873, 3.639244226, 4.042361711, 4.06427298, 3.660601286, 2.756332366, 3.781442581, 3.516668852, 4.031315793, 3.932659792, 3.781252419, 3.576397242, 3.665093177, 2.99314678, 3.744779234, 3.265967873, 2.857105927, 3.813434118, 3.925857484, 3.902772148, 3.96770934, 4.024513486, 3.285110559, 4.112652591, 4.097991553, 4.06427298, 3.742494622, 3.564925465, 4.104793861, 3.701566361, 3.639244226]
std_test = [[i] for i in std_test]












